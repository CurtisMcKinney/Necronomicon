=================================================================================================================
-- Chad To Do 3/21/2020
Where expressions in a case expression case aren't parsing correctly
Possibly some issue with binary operators (need to track down repro)

Test math operations:
Complex trig ->
    exp2
    log2
    log10

tested already:
atanF64
atan2
tanF64
sinh64
sineh
cosineh
cis<complex>
polar<complex>
sqrMagnitude<complex>
magnitude<complex>
conjugate<complex>
phase<complex>
Complex ->
    sine
    cosine
    sineh
    cosineh
    exp
    log
    pow
    atan2




=================================================================================================================
-- Chad To Do 10/20/2019
non-sum type destructuring of apats in function -> for example

myCoolFunc :: (Int, Int) -> Int
myCoolFunc (a, b) = a + b

desugars to

myCoolFunc arg =
  case arg of
    (a, b) -> a + b


myCoolFunc2 :: (Int, Int) -> (Float, Float) -> Int
myCoolFunc2 (a, b) (c, d) = a + b / c + d

desguars to

myCoolFunc2 :: (Int, Int) -> (Float, Float) -> Int
myCoolFunc2 arg1 arg2 =
  case arg1 of
    (a, b) -> case arg2 of
        (c, d) -> a + b / c + d

(NOT SUPPORTED FOR NOW)

myUnCoolFunc :: Bool
myUnCoolFunc True = False


=================================================================================================================













Translate to core:
	* Typeclasses don't use dictionaries
	* Instead deep copy every version of the AST for the instances, modified/name mangled to use the types (recursive)
	* Make everything concrete types in core (no polymorphism), don't need big/small lambda stuff
	* Don't have to worry about .forall or lambdas etc..
	* Should make typing core simpler



-- Chad To Do 2/24/2019

CORE TRANSLATION
	* Check notes in core.h
	* Things should be filtered out
	* don't need typeclass
	* have to get rid of polymorphism (if necro type is polymorphic returns true, ignore, goes for functions and values)
	* typeclass instances, ignore everything but declarations
	* merge the different modules into one giant ast: First base, then user code, into one singular AST (make this more general somehow?)
	* later passes: fix things I break (maybe make the current AST _deprecated, then just operate independantly)

Type unify, compare types
look at type.h line 57, the necro types
necro_type_exact_unify (intern strings, get necrosymbol, necro_symtable_get_typed_ast_symbol, get ast symbol pointers, then compare)



-- Chad To Do 2/17/2019

Translate to core:
	* Typeclasses don't use dictionaries
	* Instead deep copy every version of the AST for the instances, modified/name mangled to use the types (recursive)
	* Make everything concrete types in core (no polymorphism), don't need big/small lambda stuff
	* Don't have to worry about .forall or lambdas etc..
	* Should make typing core simpler



-- Chad To Do 2/10/2019
Switch to new ast symbol system (no necrovar etc..)
	1. make a NecroCoreAstSymbol and use that instead
	2. finish implementing all the transformations  for the Core AST
	3. Make it typed (somehow...), can use NecroTypes (shouldn't need higher ranked polymorphism
	4. driver.c (around line 83) --> all the phases work in a uniform way, Core needs to work in the same way!

type inference testing, the AST and types
	NecroTypeExecUnify (or something) -> something like that -> assert result and expected

-- Types and runtime
We need to monomorphize all functions.


-- To Do 7/1/2018

1) bind rec -> Different node, not just flag
    If one declaration in a declaration group -> Simple bind
    If multiple declarations in a group -> They're all bind recs
    :: Caveat
        unless they are *ALL* bindings to the same name, which will be desugared to a case statement as a single bind. 
        Example:
        foo Nothing = 0
        foo (Just x) = x

    however even one thing with a different name, then all of them are bind recs



2) Make nested functions work in core:
    example: Things that aren't simple assignment!



