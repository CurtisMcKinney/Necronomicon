
----------------------
-- Deriving Test
----------------------

-- TODO: More Tests
-- TODO: Ord
-- TODO: Print?
-- TODO: More?

-- Tests should be folded into infer tests

----------------------
-- Default

-- -- ERROR
-- data NoDefaultHere  = NoDefaultHere Int
-- data TooSmallToFail = TooSmallToFail NoDefaultHere deriving (Default)

-- -- OK
-- data DefaultHere  = DefaultHere Int
-- instance Default DefaultHere where
--   default = DefaultHere 666
-- data NeverFail = NeverFail DefaultHere deriving (Default)

-- -- OK
-- data NeverFail a b = NeverFail a b UInt deriving (Default)
-- dontFailNow :: NeverFail Bool Bool
-- dontFailNow =
--   default

-- -- OK
-- data SumThing = SumThingLeft | SumThingRight deriving (Default)
-- usedThing :: SumThing
-- usedThing =
--   default

-- -- ERROR
-- data DoubleDown = DoubleDown Int deriving (Default)
-- instance Default DoubleDown where
--   default = DoubleDown 33


----------------------
-- Enum

-- OK
-- TODO: max on toEnum value!
data NotANum  = NotANum | NoReally deriving (Enum, Default)
notANum :: NotANum
notANum =
  toEnum 0

overTheNum :: NotANum
overTheNum =
  toEnum 300

maximumOverdrive :: Float
maximumOverdrive =
  max 1000 666

maximumUnderdrive :: UInt
maximumUnderdrive =
  min 1000 666

maximumSignderdrive :: Int
maximumSignderdrive =
  max 1000 666

maxArg :: Int -> Int
maxArg x =
  max x 666

toTheMax :: Int
toTheMax =
  maxArg 45

-- resample :: (a : c1) -> (a : c2)
-- visualSide :: Float : Seq c
-- audioSide :: Float : Audio
-- -- Clocks default to Audio Clock
-- data Float : c = ...
-- data Seq a : SeqClock c = ...
-- simpleScoreSeq1 :: Seq Float : SeqClock c
-- simpleScoreSeq1 =
--   case scoreSection of
--     SimpleScore A -> [1 2 [3:2] 5 seqMouseX]
--     SimpleScore B -> [6 3 2 [3:1:2]]
--     SimpleScore C -> [4 2 <1 3> 2]
--     _             -> [5 0.5 4 1]

----------------------
-- Eq

-- -- ERROR
-- data NoThereThere   = NoThereThere Int
-- data TooSmallToFail = TooSmallToFail NotMember deriving (Eq)

-- -- OK
-- data Equalizer  = Equalizer Int deriving(Eq)
-- greatEQ :: Bool
-- greatEQ =
--   Equalizer 45 == Equalizer 33

-- -- OK
-- data NeverFail a b = NeverFail a b Bool | Yep deriving (Eq, Default)
-- dontFailNow :: NeverFail Int UInt -> NeverFail Int UInt -> Bool
-- dontFailNow x y =
--   x == y

-- -- OK
-- data SumThing = SumThingLeft | SumThingRight deriving (Eq)
-- usedThing :: Bool
-- usedThing =
--   SumThingLeft == SumThingRight

-- -- OK
-- data SumThing = SumThingLeft Int | SumThingRight Int deriving (Eq)
-- usedThing :: Bool
-- usedThing =
--   SumThingLeft 6 == SumThingRight 7

-- -- OK
-- data SumThing = SumThingLeft Int | SumThingRight deriving (Eq)
-- usedThing :: Bool
-- usedThing =
--   SumThingLeft 6 == SumThingRight

-- -- ERROR
-- data DoubleDown = DoubleDown Int deriving (Eq)
-- instance Eq DoubleDown where
--   eq (DoubleDown x) (DoubleDown y) =
--     x == y


